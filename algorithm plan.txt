ACTIVPAL ALGORITHM LAYOUT

Process data
	Port data from .csv to dataframe

Cut data to experimental window
	Find best consecutive x days
	remove all other days into dataframe "unused data"

#active Pal Algorithm----

#Code constants ----
consecutive_days <- 3
working_directory <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
path <- "sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"

#Helper functions for later in the code ----
convert_time <- function(time_string) {
  return(unlist(strsplit(paste(time_string), " ")))
}

#Convert from .csv to data frame ----
setwd(working_directory)
data <- activpalProcessing::activpal.file.reader(path)

#Cut data to valid window ----
first_day <- convert_time(data[1, 1])[1]
last_day <- convert_time(data[nrow(data), 1])[1]
days <- as.character(seq(as.Date(first_day), as.Date(last_day), "days"))

if(length(days) < consecutive_days){
  print(paste("ERROR: Consecutive days specified is greater than total number of days in input data, reducing consecutive days down to", as.character((length(days)))))
  consecutive_days <- length(days)
}

steps_per_day <- data.frame(matrix(0, nrow=1, ncol=length(days)))
colnames(steps_per_day) <- days

for(i in 1:nrow(data)){
  date <- convert_time(data[i, 1])[1]
  steps_per_day[1, date] <- data[i, 5]
}
for(i in ncol(steps_per_day):2){
  steps_per_day[1, i] <- steps_per_day[1, i] - steps_per_day[1, i-1]
}

window_start_index <- 0
curr_max <- 0
for(i in 1:(length(days)-consecutive_days+1)){
  potential_max <- 0
  for(j in 0:(consecutive_days-1)){
    potential_max <- potential_max + steps_per_day[1, (i+j)]
  }
  if(potential_max > curr_max){
    window_start_index <- i
    curr_max <- potential_max
  }
}

valid_days <- days[window_start_index:(window_start_index+consecutive_days-1)]
to_remove <- c()
for(i in 1:nrow(data)){
  date <- convert_time(data[i, 1])[1]
  if(!(date %in% valid_days)){
    to_remove <- c(to_remove, i)
  }
}
if(length(to_remove) != 0){
  data_outside_experimental_window <- data[to_remove,]
  data <- data[-to_remove,]
}else{
  data_outside_experimental_window <- data.frame(matrix(ncol=ncol(data), nrow=0))
  colnames(data_outside_experimental_window) <- colnames(data)
}

rm(steps_per_day, curr_max, date, days, first_day, i, j, last_day, potential_max, to_remove, window_start_index)

#active Pal Algorithm----

#Code constants ----
consecutive_days <- 7
working_directory <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
path <- "sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
always_slnw_min_hours <- 5
longest_only_slnw_min_hours <- 2
before_window_mins <- 15
after_window_mins <- 15
always_slnw_surrounding_hours <- 2
longest_slnw_surrounding_mins <- 30
slnw_surrounding_steps <- 20
slnw_surrounding_steps_with_posture_changes <- 0
invalid_day_largest_bout_percentage <- 95
invalid_day_min_step_count <- 500
invalid_day_min_hours <- 10



#Helper functions for later in the code ----
convert_time <- function(time_string) {
  return(unlist(strsplit(paste(time_string), " ")))
}

search_forwards <- function(slnw_index, data){
  longest_slnw_bout <- 0
  curr_index <- slnw_index + 1
  while(curr_index <= nrow(data) && as.numeric(difftime(data[curr_index, 1], data[slnw_index+1, 1]), units = "secs") <= (after_window_mins * 60)){
    if(data[curr_index, 4] < 2 && data[curr_index, 3] > longest_slnw_bout){
      longest_slnw_bout <- data[curr_index, 3]
    }
    curr_index <- curr_index + 1
  }
  curr_index <- curr_index - 1
  total_steps <- data[curr_index, 5] - data[slnw_index, 5]
  if(longest_slnw_bout >= (always_slnw_surrounding_hours * 3600) || (longest_slnw_bout >= (longest_slnw_surrounding_mins * 30) && total_steps <= slnw_surrounding_steps) || total_steps <= slnw_surrounding_steps_with_posture_changes){
    return(curr_index)
  }else{
    return(slnw_index)
  }
}

search_backwards <- function(slnw_index, data){
  longest_slnw_bout <- 0
  curr_index <- slnw_index - 1
  while(curr_index >= 1 && as.numeric(difftime(data[slnw_index, 1], data[curr_index+1, 1]), units = "secs") <= (after_window_mins * 60)){
    if(data[curr_index, 4] < 2 && data[curr_index, 3] > longest_slnw_bout){
      longest_slnw_bout <- data[curr_index, 3]
    }
    curr_index <- curr_index - 1
  }
  curr_index <- curr_index + 1
  total_steps <- data[slnw_index, 5] - data[curr_index, 5]
  if(longest_slnw_bout >= (always_slnw_surrounding_hours * 3600) || (longest_slnw_bout >= (longest_slnw_surrounding_mins * 30) && total_steps <= slnw_surrounding_steps) || total_steps <= slnw_surrounding_steps_with_posture_changes){
    return(curr_index)
  }else{
    return(slnw_index)
  }
}

#Convert from .csv to data frame ----
setwd(working_directory)
data <- activpalProcessing::activpal.file.reader(path)

#Cut data to valid window ----
first_day <- convert_time(data[1, 1])[1]
last_day <- convert_time(data[nrow(data), 1])[1]
days <- as.character(seq(as.Date(first_day), as.Date(last_day), "days"))

if(length(days) < consecutive_days){
  print(paste("ERROR: Consecutive days specified is greater than total number of days in input data, reducing consecutive days down to", as.character((length(days)))))
  consecutive_days <- length(days)
}

steps_per_day <- data.frame(matrix(0, nrow=1, ncol=length(days)))
colnames(steps_per_day) <- days

for(i in 1:nrow(data)){
  date <- convert_time(data[i, 1])[1]
  steps_per_day[1, date] <- data[i, 5]
}
for(i in ncol(steps_per_day):2){
  steps_per_day[1, i] <- steps_per_day[1, i] - steps_per_day[1, i-1]
}

window_start_index <- 0
curr_max <- 0
for(i in 1:(length(days)-consecutive_days+1)){
  potential_max <- 0
  for(j in 0:(consecutive_days-1)){
    potential_max <- potential_max + steps_per_day[1, (i+j)]
  }
  if(potential_max > curr_max){
    window_start_index <- i
    curr_max <- potential_max
  }
}

valid_days <- days[window_start_index:(window_start_index+consecutive_days-1)]
to_remove <- c()
for(i in 1:nrow(data)){
  date <- convert_time(data[i, 1])[1]
  if(!(date %in% valid_days)){
    to_remove <- c(to_remove, i)
  }
}
if(length(to_remove) != 0){
  data_outside_experimental_window <- data[to_remove,]
  data <- data[-to_remove,]
}else{
  data_outside_experimental_window <- data.frame(matrix(ncol=ncol(data), nrow=0))
  colnames(data_outside_experimental_window) <- colnames(data)
}

rm(steps_per_day, curr_max, date, days, first_day, i, j, last_day, potential_max, to_remove, window_start_index)

#Remove SLNW bouts ----
data <- transform(data, cumulativesteps=cumulativesteps-data[1,5])

noon_day_maxes <- c()
noon_day_indices <- c()
for(i in 1:(length(valid_days)+1)){
  noon_day_maxes <- c(noon_day_maxes, -1)
  noon_day_indices <- c(noon_day_indices, -1)
}

get_noon_day_index <- function(first_day, current_date_time){
  start <- paste(first_day, "12:00:00", sep = " ")
  day_count <- as.numeric(difftime(current_date_time, start), units = "days")
  return(2 + floor(day_count))
}

slnw_indices <- c()
for(i in 1:nrow(data)){
  noon_index <- get_noon_day_index(valid_days[1], data[i, 1])
  if(data[i, 4] < 2 && (data[i, 3] >= longest_only_slnw_min_hours * 3600)){
    if(data[i, 3] >= (always_slnw_min_hours * 3600)){
      slnw_indices <- c(slnw_indices, i)
    }
    if(data[i, 4] > noon_day_maxes[noon_index]) {
      noon_day_maxes[noon_index] <- data[i, 4]
      noon_day_indices[noon_index] <- i
    }
  }
}

for(i in 1:length(noon_day_indices)){
  if(noon_day_indices[i] != -1 && !(noon_day_indices[i] %in% slnw_indices)){
    slnw_indices <- c(slnw_indices, noon_day_indices[i])
  }
}

for(i in 1:length(slnw_indices)){
  curr_slnw_index <- slnw_indices[i]
  backward <- search_backwards(curr_slnw_index, data)
  forward <- search_forwards(curr_slnw_index, data)
  
  while(backward < curr_slnw_index){
    if(!(backward %in% slnw_indices)){
      slnw_indices <- c(slnw_indices, backward)
    }
    backward <- backward + 1
  }
  while(forward > curr_slnw_index){
    if(!(forward %in% slnw_indices)){
      slnw_indices <- c(slnw_indices, forward)
    }
    forward <- forward - 1
  }
}

slnw_indices <- sort(slnw_indices)

slnw_data <- data[slnw_indices,]
data <- data[-c(slnw_indices),]

rm(backward, forward, curr_slnw_index, slnw_indices, i, noon_day_indices, noon_day_maxes, noon_index)
#Remove data from invalid days ----
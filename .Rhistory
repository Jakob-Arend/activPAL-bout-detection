#Jakob Arend
library(sjmisc)
library(NLP)
library(rlist)
setwd("C:/Users/User/Desktop/PNC Lab/activPAL SLNW detection algorithm")
test <- activpalProcessing::activpal.file.reader("data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv")
setwd("C:/Users/User/Desktop/PNC_Lab/activPAL bout detection")
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next we set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#
data <- activpalProcessing::activpal.file.reader(data_path)
head(data)
data <- data[-c(1,2),]
head(data)
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#
data <- activpalProcessing::activpal.file.reader(data_path2)
data <- data[-c(1,2),]
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#
data <- activpalProcessing::activpal.file.reader(data_path2)
head(data)
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv"
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#
data <- activpalProcessing::activpal.file.reader(data_path2)
head(data)
tail(data)
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv"
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#
data <- activpalProcessing::activpal.file.reader(data_path)
data2 <- activpalProcessing::activpal.file.reader(data_path2)
head(data)
tail(data)
head(data2)
tail(data2)
for(i in 1:nrow(data)){
if(i < 10){
print(data[i, 0])
}
}
for(i in 1:nrow(data)){
if(i < 10){
print(data[i, ])
}
}
f
for(i in 1:nrow(data)){
if(i < 10){
print(data[i, ][0])
}
}
for(i in 1:nrow(data)){
if(i < 10){
print(data[i, 1])
}
}
for(i in 1:nrow(data)){
if(i > 890){
print(data[i, 1])
}
}
for(i in 1:nrow(data2)){
if(i < 10){
print(data[i, 1])
}
}
if(i < 3360){
print(data[i, 1])
}
for(i in 1:nrow(data2)){
if(i < 3360){
print(data[i, 1])
}
}
for(i in 1:nrow(data2)){
if(i > 3360){
print(data[i, 1])
}
}
for(i in 1:nrow(data2)){
if(i > 3360){
print(data2[i, 1])
}
}
for(i in 1:nrow(data2)){
if(i < 10){
print(data2[i, 1])
}
}
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(i < 10){
print(date)
}
}
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
temporary_dataframe <- data.frame()
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date in temporary_dataframe)){
print("hi")
}
}
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
print("hi")
}
}
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
temporary_dataframe <- data.frame()
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe$date
print("hi")
}
}
head(data)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe$date <- data[i, 5]
print("hi)")
}
}
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
temporary_dataframe <- data.frame()
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe$date <- data[i, 5]
temporary_dataframe$days %+=% 1
} else {
temporary_dataframe$date[1] %+=% data[i, 5]
}
}
print(temporary_dataframe)
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
temporary_dataframe <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe$date <- data[i, 5]
temporary_dataframe$days %+=% 1
} else {
temporary_dataframe$date[1] %+=% data[i, 5]
}
}
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
temporary_dataframe <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe$date <- data[i, 5]
temporary_dataframe$days <- temporary_dataframe$days + 1
} else {
temporary_dataframe$date[1] <- temporary_dataframe$date[1] + data[i, 5]
}
}
print(temporary_dataframe)
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
temporary_dataframe <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe[, date] <- data[i, 5]
temporary_dataframe$days <- temporary_dataframe$days + 1
} else {
temporary_dataframe[1, date] <- temporary_dataframe[1, date] + data[i, 5]
}
}
print(temporary_dataframe)
tail(data)
head(data)
data <- activpalProcessing::activpal.file.reader(data_path2)
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
temporary_dataframe <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe[, date] <- data[i, 5]
temporary_dataframe$days <- temporary_dataframe$days + 1
} else {
temporary_dataframe[1, date] <- temporary_dataframe[1, date] + data[i, 5]
}
}
print(temporary_dataframe)
#SETUP----
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv"
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#ALGORITHM----
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#first we need to go ahead and read in our dataset
data <- activpalProcessing::activpal.file.reader(data_path)
data <- activpalProcessing::activpal.file.reader(data_path2)
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
temporary_dataframe <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% temporary_dataframe)){
temporary_dataframe[, date] <- data[i, 5]
temporary_dataframe$days <- temporary_dataframe$days + 1
} else {
temporary_dataframe[1, date] <- temporary_dataframe[1, date] + data[i, 5]
}
}
print(temporary_dataframe)
min(temporary_dataframe, na.rm = TRUE)
#next we need to identify which 7 days our participant actually participated in data collection
#we'll do this by identifying the 7 days with the most steps and using that to identify our start and stop date
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps$days <- steps$days + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
while(ncol(steps) > 7){
least_steps <- min(steps, na.rm = TRUE)
for(i in 1:ncol(data)){
if(least_steps == steps)
}
}
#SETUP----
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv"
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#ALGORITHM----
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#first we need to go ahead and read in our dataset
data <- activpalProcessing::activpal.file.reader(data_path)
data <- activpalProcessing::activpal.file.reader(data_path2)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps$days <- steps$days + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
least_steps <- min(steps, na.rm = TRUE)
for(i in 1:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps$days <- steps$days + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
print(steps)
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 1:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps$days <- steps$days + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
print(steps)
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 1:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)

for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#SETUP----
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA008-SA008-AP840031 9Apr19 12-00am for 13d 16h 23m-VANE-PB08090417-Events.csv"
data_path2 <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#ALGORITHM----
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#first we need to go ahead and read in our dataset
data <- activpalProcessing::activpal.file.reader(data_path)
data <- activpalProcessing::activpal.file.reader(data_path2)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps$days <- steps$days + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
print(steps)
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
x <- "hi"
xnum <- 10
y <- "ih"
ynum <- 20
test <- list(x = xnum, y = ynum)
test$hi
print(test)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps[1, days] <- steps[1, days] + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% steps)){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
print("New date found!")
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {s
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- steps[1, date] + data[i, 5]
}
}
print(steps)
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
tail(data)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
print(steps)
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 8){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
steps$days <- NULL
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
steps[1] <- NULL
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
print(ncol(steps))
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
steps$days <- NULL
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
#SETUP----
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <-"sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#first we need to go ahead and read in our dataset
data <- activpalProcessing::activpal.file.reader(data_path)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
steps$days <- NULL
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
least_steps <- min(steps, na.rm = TRUE)
for(i in 2:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
tail(data)
print(steps)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
steps$days <- NULL
#next we remove down to the 7 days with the largest step counts
while(ncol(steps) > 7){
least_steps <- min(steps, na.rm = TRUE)
for(i in 1:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
print(steps)
print(colnames(steps))
#SETUP----
#first we import all the libraries which we utilize
#note here that you will need the activPAL package installed which has a dependency on the "chron" package
#the most current activPAL package can be found at https://cran.r-project.org/src/contrib/Archive/activpalProcessing/activpalProcessing_1.0.2.tar.gz
library(sjmisc)
library(NLP)
library(rlist)
#next up we need to set our working directory so that we can access our data
#set variable "wd" equal to a string containing the full path to the directory you intend to work from
wd <- "C:/Users/User/Desktop/PNC_Lab/activPAL-bout-detection"
setwd(wd)
#finishing our setup we now just have to provide the path to our data
#set variable "data_path" equal to a string containing the partial path FROM YOUR WORKING DIRECTORY
data_path <- "sample_data/SA009-SA009-AP840032 11Apr19 12-00am for 12d 16h 22m-VANE-PB08090417-Events.csv"
#now we're ready to go ahead and run our activPAL bout detection data reduction on our dataset
#first we need to go ahead and read in our dataset
data <- activpalProcessing::activpal.file.reader(data_path)
#first we count how many steps occur on each day
days <- 0
steps <- data.frame(days)
for(i in 1:nrow(data)){
date <- substr(data[i, 1], 1, 10)
if(!(date %in% colnames(steps))){
steps[, date] <- data[i, 5]
steps[1, "days"] <- steps[1, "days"] + 1
} else {
steps[1, date] <- data[i, 5]
}
}
steps$days <- NULL
#next we remove down to the 7 days with the largest step counts and save those days into a list"valid_days"
while(ncol(steps) > 7){
least_steps <- min(steps, na.rm = TRUE)
for(i in 1:ncol(data)){
if(least_steps == steps[1, i]){
steps[i] <- NULL
break
}
}
}
valid_days = colnames(steps)
#lastly just as a nicety we'll clean up our working env
rm(steps, date, days, i, least_steps)
#CUT DATA TO 7 DAY WINDOW----
#now that we have a list of valid days, we can cut out all data which took place outside of the experiment
days_to_remove <- c()
for(i in 1:nrow(data)){
if(!(substr(data[i, 1], 1, 10) %in% valid_days)){
days_to_remove <- c(days_to_remove, i)
}
}
data <- data[-c(days_to_remove),]
#as before let's clean up our working env for clarity
rm(i, days_to_remove)
for(i in 1:nrow(data)){
}
#IDENTIFY SLNW BOUTS----
#First we need to partition out our data into noon-noon days so we can effectively search for sleep
curr_day <- valid_days[1]
tail9data)
tail(data)
head(data)
data[1:10,]
data[100:110,]
data[1100:1110,]
#IDENTIFY SLNW BOUTS----
#First we need to partition out our data into noon-noon days so we can effectively search for sleep
curr_day <- paste(valid_days[1], "12:00:00", sep = " ")
as.numeric(difftime(curr_day, data[1,1]))
as.numeric(difftime(curr_day, data[1,1]), units = "hours")
as.numeric(difftime(curr_day, data[1,1]), units = "days")
as.numeric(difftime(curr_day, data[1,1]), units = "seconds")
as.numeric(difftime(curr_day, data[1,1]), units = "minutes")
as.numeric(difftime(curr_day, data[1,1]), units = "hours")
as.numeric(difftime(curr_day, data[1,1]), units = "secs")
as.numeric(difftime(data[1, 1], curr_day), units = "secs")
1:3
lengths(valid_days)
len(valid_days)
length(valid_days)
#IDENTIFY SLNW BOUTS----
#First we need to partition out our data into noon-noon days so we can effectively search for sleep
curr_day <- paste(valid_days[1], "12:00:00", sep = " ")
day_counter <- 1
noon_days <- c()
for(i in nrow(data)){
if(as.numeric(difftime(data[i, 1], curr_day), units = "secs") > 0) {
noon_days <- c(noon_days, i)
day_counter <- day_counter + 1
if(day_counter > length(valid_days)){
break
} else {
curr_day <- paste(valid_days[day_counter], "12:00:00", sep = " ")
}
}
}
print(noon_days)
#IDENTIFY SLNW BOUTS----
#First we need to partition out our data into noon-noon days so we can effectively search for sleep
curr_day <- paste(valid_days[1], "12:00:00", sep = " ")
day_counter <- 1
noon_days <- c()
for(i in 1:nrow(data)){
if(as.numeric(difftime(data[i, 1], curr_day), units = "secs") > 0) {
noon_days <- c(noon_days, i)
day_counter <- day_counter + 1
if(day_counter > length(valid_days)){
break
} else {
curr_day <- paste(valid_days[day_counter], "12:00:00", sep = " ")
}
}
}
print(noon_days)
print(data[175:180, 1])
print(data[177:"178", 1])
print(data[875:876, 1])
print(data[2746:2747, 1])
#IDENTIFY SLNW BOUTS----
#First we need to partition out our data into noon-noon days so we can effectively search for sleep
curr_day <- paste(valid_days[1], "12:00:00", sep = " ")
day_counter <- 1
noon_days <- c()
for(i in 1:nrow(data)){
if(as.numeric(difftime(data[i, 1], curr_day), units = "secs") > 0) {
noon_days <- c(noon_days, i)
day_counter <- day_counter + 1
if(day_counter > length(valid_days)){
print("hi")
break
} else {
curr_day <- paste(valid_days[day_counter], "12:00:00", sep = " ")
}
}
}
print(day_counter)
tail(data)
#IDENTIFY SLNW BOUTS----
#First we need to partition out our data into noon-noon days so we can effectively search for sleep
curr_day <- paste(valid_days[1], "12:00:00", sep = " ")
day_counter <- 1
noon_days <- c()
for(i in 1:nrow(data)){
if(as.numeric(difftime(data[i, 1], curr_day), units = "secs") > 0) {
noon_days <- c(noon_days, i)
day_counter <- day_counter + 1
if(day_counter > length(valid_days)){
break
} else {
curr_day <- paste(valid_days[day_counter], "12:00:00", sep = " ")
}
}
}
#To account for the case that our day 7 data never crossed the noon threshold we add a fake index at one past the array
if(day_counter == length(valid_days)){
noon_days <- c(noon_days, nrow(data) + 1)
}
print(noon_days)
View(data)
View(data)
master_list <- list()
master_list.append(list())
list.append(master_list, list())
master_list <- list(1, 2)
list.append(master_list, list())
list.append(master_list, list(3 4))
list.append(master_list, list(3, 4))
print(master_list)
print(master_list)
#Now we can iterate through each day and identify our sleep periods
sleep_data = data.frame(data[1,])
View(sleep_data)
#Now we can iterate through each day and identify our sleep periods
sleep_data = data.frame(data[FALSE,])
View(sleep_data)
View(data)
